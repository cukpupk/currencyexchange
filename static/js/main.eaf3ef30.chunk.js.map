{"version":3,"sources":["Footer/Footer.js","App.js","serviceWorker.js","index.js","img/money.png"],"names":["Footer","year","Date","getFullYear","toString","className","App","props","handleInputChange","e","setState","input","target","value","handleSelectorChange","country","Currency1","handleSelector2Change","Currency2","handleSwapClick","temp","state","temp2","Calculate","fetch","then","res","json","data","rate","rates","convertion","toFixed","this","src","logo","alt","defaultValue","onChange","type","onClick","handleInput2Change","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"8PAWeA,EATA,WACX,IAAMC,GAAQ,IAAIC,MAAQC,cAAcC,WACxC,OACI,yBAAKC,UAAU,UACX,8CAAsBJ,EAAtB,0BCuLIK,E,YAxLd,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KASRC,kBAAoB,SAAAC,GAClB,EAAKC,SAAS,CACZC,MAAOF,EAAEG,OAAOC,SAZD,EAenBC,qBAAuB,SAAAL,GACrB,IAAIM,EAAUN,EAAEG,OAAOC,MACvB,EAAKH,SAAS,CACZM,UAAWD,KAlBI,EAqBnBE,sBAAwB,SAAAR,GACtB,IAAIM,EAAUN,EAAEG,OAAOC,MACvB,EAAKH,SAAS,CACZQ,UAAWH,KAxBI,EA2BnBI,gBAAkB,WAChB,IAAIC,EAAO,EAAKC,MAAML,UAClBM,EAAQ,EAAKD,MAAMH,UACvB,EAAKR,SAAS,CACZM,UAAWM,EACXJ,UAAWE,KAhCI,EAmCnBG,UAAY,WACVC,MAAM,8CAAD,OAA+C,EAAKH,MAAML,YAC1DS,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAEJ,IAAMC,EAAOD,EAAKE,MAAM,EAAKT,MAAMH,WACnC,EAAKR,SAAS,CACZmB,KAAK,KAAD,OAAO,EAAKR,MAAML,UAAlB,cAAiCa,EAAjC,YAAyC,EAAKR,MAAMH,WACxDa,YAAa,EAAKV,MAAMV,MAAMkB,GAAMG,QAAQ,SAzCpD,EAAKX,MAAQ,CACXV,MAAO,EACPoB,WAAY,EACZf,UAAW,MACXE,UAAU,MACVW,KAAM,IAPS,E,sEAkDjB,OAFAI,KAAKV,YAID,yBAAKlB,UAAU,aAEb,yBAAK6B,IAAKC,IAAMC,IAAI,mBAAmB/B,UAAU,cACjD,wBAAIA,UAAU,WAAd,4BAEA,4FAEA,yBAAKA,UAAU,kBACb,4BAAQgC,aAAa,MAAMxB,MAAOoB,KAAKZ,MAAML,UAAWX,UAAU,YAAYiC,SAAUL,KAAKnB,sBAC3F,4BAAQD,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,QAGF,2BAAO0B,KAAK,SAASlC,UAAU,QAAQQ,MAAOoB,KAAKZ,MAAMV,MAAO2B,SAAUL,KAAKzB,qBAGjF,yBAAKH,UAAU,kBACb,4BAAQA,UAAU,MAAMmC,QAASP,KAAKd,iBAAtC,QACA,wBAAId,UAAU,WAAW4B,KAAKZ,MAAMQ,OAEtC,yBAAKxB,UAAU,kBACb,4BAAQgC,aAAa,MAAMxB,MAAOoB,KAAKZ,MAAMH,UAAWb,UAAU,YAAYiC,SAAUL,KAAKhB,uBAC3F,4BAAQJ,MAAM,MAAMR,UAAU,UAA9B,OACA,4BAAQQ,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,QAEF,2BAAO0B,KAAK,SAAS1B,MAAOoB,KAAKZ,MAAMU,WAAa1B,UAAU,QAAQiC,SAAUL,KAAKQ,sBAEvF,kBAAC,EAAD,W,GApLQC,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,sCEzI5BC,EAAOC,QAAU,IAA0B,oC","file":"static/js/main.eaf3ef30.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Footer = () => {\r\n    const year = (new Date()).getFullYear().toString();\r\n    return (\r\n        <div className=\"footer\">\r\n            <p>Tommy Tang &copy; {year}, All Right Reserved</p>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\nimport './index.css';\nimport logo from './img/money.png';\nimport Footer from './Footer/Footer'\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { //Initiate 5 variable here.\n      input: 0, //User type the input money, which is the root variable\n      convertion: 0,//Output Money.\n      Currency1: \"USD\", //the first Selector's country name\n      Currency2:\"USD\",//the second Selector's country name\n      rate: '' //To represent the currency rate of two currencies\n    }\n  };\n  handleInputChange = e => { //To update the input field\n    this.setState({\n      input: e.target.value,\n    })\n  };\n  handleSelectorChange = e => { // To push the option in the First Selector into State: Currrency1\n    let country = e.target.value;\n    this.setState({\n      Currency1: country\n    })\n  };\n  handleSelector2Change = e => {// To push the option in the First Selector into State: Currrency2\n    let country = e.target.value;\n    this.setState({\n      Currency2: country\n    })\n  };\n  handleSwapClick = () => {//After click the swap button, the Options in two Selectors will swap each other\n    let temp = this.state.Currency1;//create two temp variables which are the current options of selectors\n    let temp2 = this.state.Currency2;\n    this.setState({\n      Currency1: temp2,//Swap\n      Currency2: temp\n    })\n  }\n  Calculate = () => {//fetch the current currency rate from the API and do the execution\n    fetch(`https://api.exchangerate-api.com/v4/latest/${this.state.Currency1}`)\n        .then(res => res.json())\n        .then(data => {\n\n          const rate = data.rates[this.state.Currency2];//get the rate of two currencies from the API\n          this.setState({\n            rate: `1 ${this.state.Currency1} = ${rate} ${this.state.Currency2}`, //push the rate into a String\n            convertion: (this.state.input*rate).toFixed(2)//output the converted money after the rate obtained from the API\n          });\n        });\n  }\n  render() {\n    this.Calculate(); //Once the state changes, React will rerender the webpage. Therefore, to run the Calculate function here to make sure the converted\n    //number is updated when the country name is changed.\n    return (\n        // use flex box to style. From top to bottom and center all the elements\n        <div className=\"Container\">\n          {/*Image here*/}\n          <img src={logo} alt=\"Money_Convertion\" className=\"money-img\" />\n          <h1 className=\"h1Style\">Exchange Rate Calculator</h1>\n\n          <h2>Choose the currency and the amounts to get the exchange rate</h2>\n\n          <div className=\"smallContainer\">\n            <select defaultValue=\"USD\" value={this.state.Currency1} className=\"Selector1\" onChange={this.handleSelectorChange} >\n              <option value=\"AED\">AED</option>\n              <option value=\"ARS\">ARS</option>\n              <option value=\"AUD\">AUD</option>\n              <option value=\"BGN\">BGN</option>\n              <option value=\"BRL\">BRL</option>\n              <option value=\"BSD\">BSD</option>\n              <option value=\"CAD\">CAD</option>\n              <option value=\"CHF\">CHF</option>\n              <option value=\"CLP\">CLP</option>\n              <option value=\"CNY\">CNY</option>\n              <option value=\"USD\">USD</option>\n              <option value=\"COP\">COP</option>\n              <option value=\"CZK\">CZK</option>\n              <option value=\"DKK\">DKK</option>\n              <option value=\"DOP\">DOP</option>\n              <option value=\"EGP\">EGP</option>\n              <option value=\"EUR\">EUR</option>\n              <option value=\"FJD\">FJD</option>\n              <option value=\"GBP\">GBP</option>\n              <option value=\"GTQ\">GTQ</option>\n              <option value=\"HKD\">HKD</option>\n              <option value=\"HRK\">HRK</option>\n              <option value=\"HUF\">HUF</option>\n              <option value=\"IDR\">IDR</option>\n              <option value=\"ILS\">ILS</option>\n              <option value=\"INR\">INR</option>\n              <option value=\"ISK\">ISK</option>\n              <option value=\"JPY\">JPY</option>\n              <option value=\"KRW\">KRW</option>\n              <option value=\"KZT\">KZT</option>\n              <option value=\"MXN\">MXN</option>\n              <option value=\"MYR\">MYR</option>\n              <option value=\"NOK\">NOK</option>\n              <option value=\"NZD\">NZD</option>\n              <option value=\"PAB\">PAB</option>\n              <option value=\"PEN\">PEN</option>\n              <option value=\"PHP\">PHP</option>\n              <option value=\"PKR\">PKR</option>\n              <option value=\"PLN\">PLN</option>\n              <option value=\"PYG\">PYG</option>\n              <option value=\"RON\">RON</option>\n              <option value=\"RUB\">RUB</option>\n              <option value=\"SAR\">SAR</option>\n              <option value=\"SEK\">SEK</option>\n              <option value=\"SGD\">SGD</option>\n              <option value=\"THB\">THB</option>\n              <option value=\"TRY\">TRY</option>\n              <option value=\"TWD\">TWD</option>\n              <option value=\"UAH\">UAH</option>\n              <option value=\"UYU\">UYU</option>\n              <option value=\"VND\">VND</option>\n              <option value=\"ZAR\">ZAR</option>\n            </select>\n            {/*Input must be number only. The value property shows the value and it changes when the state updated. */}\n            <input type=\"number\" className=\"Input\" value={this.state.input} onChange={this.handleInputChange}/>\n          </div>\n          {/*This div displays the button and the rate information*/}\n          <div className=\"smallContainer\">\n            <button className=\"btn\" onClick={this.handleSwapClick}>Swap</button>\n            <h4 className=\"h1Style\">{this.state.rate}</h4>\n          </div>\n          <div className=\"smallContainer\">\n            <select defaultValue=\"USD\" value={this.state.Currency2} className=\"Selector2\" onChange={this.handleSelector2Change} >\n              <option value=\"AED\" className=\"Option\">AED</option>\n              <option value=\"ARS\">ARS</option>\n              <option value=\"AUD\">AUD</option>\n              <option value=\"BGN\">BGN</option>\n              <option value=\"BRL\">BRL</option>\n              <option value=\"BSD\">BSD</option>\n              <option value=\"CAD\">CAD</option>\n              <option value=\"CHF\">CHF</option>\n              <option value=\"CLP\">CLP</option>\n              <option value=\"CNY\">CNY</option>\n              <option value=\"USD\">USD</option>\n              <option value=\"COP\">COP</option>\n              <option value=\"CZK\">CZK</option>\n              <option value=\"DKK\">DKK</option>\n              <option value=\"DOP\">DOP</option>\n              <option value=\"EGP\">EGP</option>\n              <option value=\"EUR\">EUR</option>\n              <option value=\"FJD\">FJD</option>\n              <option value=\"GBP\">GBP</option>\n              <option value=\"GTQ\">GTQ</option>\n              <option value=\"HKD\">HKD</option>\n              <option value=\"HRK\">HRK</option>\n              <option value=\"HUF\">HUF</option>\n              <option value=\"IDR\">IDR</option>\n              <option value=\"ILS\">ILS</option>\n              <option value=\"INR\">INR</option>\n              <option value=\"ISK\">ISK</option>\n              <option value=\"JPY\">JPY</option>\n              <option value=\"KRW\">KRW</option>\n              <option value=\"KZT\">KZT</option>\n              <option value=\"MXN\">MXN</option>\n              <option value=\"MYR\">MYR</option>\n              <option value=\"NOK\">NOK</option>\n              <option value=\"NZD\">NZD</option>\n              <option value=\"PAB\">PAB</option>\n              <option value=\"PEN\">PEN</option>\n              <option value=\"PHP\">PHP</option>\n              <option value=\"PKR\">PKR</option>\n              <option value=\"PLN\">PLN</option>\n              <option value=\"PYG\">PYG</option>\n              <option value=\"RON\">RON</option>\n              <option value=\"RUB\">RUB</option>\n              <option value=\"SAR\">SAR</option>\n              <option value=\"SEK\">SEK</option>\n              <option value=\"SGD\">SGD</option>\n              <option value=\"THB\">THB</option>\n              <option value=\"TRY\">TRY</option>\n              <option value=\"TWD\">TWD</option>\n              <option value=\"UAH\">UAH</option>\n              <option value=\"UYU\">UYU</option>\n              <option value=\"VND\">VND</option>\n              <option value=\"ZAR\">ZAR</option>\n            </select>\n            <input type=\"number\" value={this.state.convertion}  className=\"Input\" onChange={this.handleInput2Change}/>\n          </div>\n          <Footer/>\n        </div>\n    )\n  }\n}\nexport  default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/money.8ebfab8f.png\";"],"sourceRoot":""}